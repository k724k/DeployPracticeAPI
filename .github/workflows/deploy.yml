name: CI/CD to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. JDK 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4. EC2에 접속 후 배포
      - name: SSH(원격접속) 로 EC2 접속
        uses: appleboy/ssh-action@v1.0.3
        env:
          APPLICATION_PROPERTIES: ${{ secrets.APPLICATION_PROPERTIES }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: APPLICATION_PROPERTIES
          script_stop: true
          script: |
            cd /home/ubuntu/DeployPracticeAPI
            rm -rf src/main/resources/application.yml
            
            # Git에서 최신 코드 가져오기 (로컬 변경 사항 무시)
            git fetch origin
            git reset --hard origin/main
            echo "$APPLICATION_PROPERTIES" > src/main/resources/application.yml
            
            # AWS 환경 변수 설정 (S3 등 접근 시)
            export AWS_S3_ACCESS_KEY_ID=${{ secrets.AWS_S3_ACCESS_KEY_ID }}
            export AWS_S3_SECRET_ACCESS_KEY=${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
            export AWS_REGION=${{ secrets.AWS_REGION }}
            
            # 이전 JAR 삭제 (선택사항)
            rm -f build/libs/*SNAPSHOT.jar
            
            # Gradle 빌드 (테스트 제외)
            ./gradlew clean build -x test
            
            # 이전 프로세스 종료 (실제 실행 포트 확인 후 종료)
            sudo fuser -k -n tcp 80 || true
            
            # 최신 JAR 선택 후 실행 (백그라운드, 환경 변수 유지)
            JAR_FILE=$(ls -t build/libs/*SNAPSHOT.jar | head -1)
            echo "Starting JAR: $JAR_FILE"
            sudo -E nohup java -jar "$JAR_FILE" > ./output.log 2>&1 &
